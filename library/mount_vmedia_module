#!/usr/bin/python
import ssl
import urllib2
from urlparse import urlparse
import httplib
import base64
import json
import hashlib
import gzip
import StringIO
import sys

DOCUMENTATION = '''
---
module: oneview_enclosure
short_description: Manage OneView Enclosure resources.
description:
    - Provides an interface to manage Enclosure resources. Can add, update, or remove.
requirements:
    - "python >= 2.7.9"
    - "hpOneView"
author: "Mariana Kreisig (@marikrg)"
options:
    config:
      description:
        - Path to a .json configuration file containing the OneView client configuration.
      required: true
    state:
        description:
            - Indicates the desired state for the Enclosure resource.
              'present' will ensure data properties are compliant to OneView.
              'absent' will remove the resource from OneView, if it exists.
        choices: ['present', 'absent']
    data:
      description:
        - List with the Enclosure properties.
      required: true
notes:
    - A sample configuration file for the config parameter can be found at&colon;
      https://github.hpe.com/Rainforest/oneview-ansible/blob/master/examples/oneview_config.json^M
'''

EXAMPLES = '''
- name: Ensure that an Enclosure is present using the default configuration
  oneview_enclosure:
    config: "{{ config_file_path }}"
    state: present
    data:
      enclosureGroupUri : {{ enclosure_group_uri }},
      hostname : {{ enclosure_hostname }},
      username : {{ enclosure_username }},
      password : {{ enclosure_password }},
      name: 'Test-Enclosure'
      licensingIntent : "OneView"
- name: Updates the enclosure to have a name of "Test-Enclosure-Renamed".
  oneview_enclosure:
    config: "{{ config_file_path }}"
    state: present
    data:
      name: 'Test-Enclosure'
      newName : "Test-Enclosure-Renamed
- name: Ensure that enclosure is absent
  oneview_enclosure:
    config: "{{ config_file_path }}"
    state: absent
    data:
      name: 'Test-Enclosure'

'''

def get_type(obj):
		    typever = obj['Type']
		    typesplit = typever.split('.')
	            return typesplit[0] + '.' + typesplit[1]

def rest_op(operation, host, suburi, request_headers, request_body, iLO_loginname, iLO_password, x_auth_token=None, enforce_SSL=True):

    url = urlparse('https://' + host + suburi)
    #url = urlparse('http://' + host + suburi)
    if request_headers is None:
        request_headers = dict()

    # if X-Auth-Token specified, supply it instead of basic auth
    if x_auth_token is not None:
        request_headers['X-Auth-Token'] = x_auth_token
    # else use iLO_loginname/iLO_password and Basic Auth
    elif iLO_loginname is not None and iLO_password is not None:
        request_headers['Authorization'] = "BASIC " + base64.b64encode(iLO_loginname + ":" + iLO_password)

    redir_count = 4
    while redir_count:
        conn = None
        if url.scheme == 'https':
            # New in Python 2.7.9, SSL enforcement is defaulted on, but can be opted-out of.
            # The below case is the Opt-Out condition and should be used with GREAT caution.
            if( sys.version_info.major == 2 and
                sys.version_info.minor == 7 and
                sys.version_info.micro >= 9 and
                enforce_SSL            == False):
                cont=ssl.SSLContext(ssl.PROTOCOL_TLSv1)
                cont.verify_mode = ssl.CERT_NONE
                conn = httplib.HTTPSConnection(host=url.netloc, strict=True, context=cont)
            else:
                conn = httplib.HTTPSConnection(host=url.netloc, strict=True)
        elif url.scheme == 'http':
            conn = httplib.HTTPConnection(host=url.netloc, strict=True)
        else:
            assert(False)
        conn.request(operation, url.path, headers=request_headers, body=json.dumps(request_body))
        resp = conn.getresponse()
        body = resp.read()
        # NOTE:  Do not assume every HTTP operation will return a JSON body.  For example, ExtendedError structures
        # are only required for HTTP 400 errors and are optional elsewhere as they are mostly redundant for many of the
        # other HTTP status code.  In particular, 200 OK responses should not have to return any body.

        # NOTE:  this makes sure the headers names are all lower cases because HTTP says they are case insensitive
        headers = dict((x.lower(), y) for x, y in resp.getheaders())
	
        # Follow HTTP redirect
        if resp.status >= 300 and resp.status < 400 and 'location' in  headers:
            url = urlparse(headers['location'])
            redir_count -= 1
        else:
            break

    response = dict()
    try:
        response = json.loads(body.decode('utf-8'))
    except ValueError: # if it doesn't decode as json
        # NOTE:  resources may return gzipped content
        # try to decode as gzip (we should check the headers for Content-Encoding=gzip)
        try:
            gzipper = gzip.GzipFile(fileobj=StringIO.StringIO(body))
            uncompressed_string = gzipper.read().decode('UTF-8')
            response = json.loads(uncompressed_string)
        except:
            pass

        # return empty
        pass

    return resp.status, headers, response


# REST GET
def rest_get(host, suburi, request_headers, iLO_loginname, iLO_password):
    return rest_op('GET', host, suburi, request_headers, None, iLO_loginname, iLO_password)
    # NOTE:  be prepared for various HTTP responses including 500, 404, etc.

def rest_patch(server, suburi, request_headers, request_body, iLO_loginname, iLO_password):
    if not isinstance(request_headers, dict):  request_headers = dict()
    request_headers['Content-Type'] = 'application/json'
    return rest_op('PATCH', server, suburi, request_headers, request_body, iLO_loginname, iLO_password)

def collection(host, collection_uri, request_headers, iLO_loginname, iLO_password):

    # get the collection
    status, headers, thecollection = rest_get(host, collection_uri, request_headers, iLO_loginname, iLO_password)

    while status < 300:

        # verify expected type

        # NOTE:  Because of the Redfish standards effort, we have versioned many things at 0 in anticipation of
        # them being ratified for version 1 at some point.  So this code makes the (unguarranteed) assumption
        # throughout that version 0 and 1 are both legitimate at this point.  Don't write code requiring version 0 as
        # we will bump to version 1 at some point.

        # hint:  don't limit to version 0 here as we will rev to 1.0 at some point hopefully with minimal changes
        assert(get_type(thecollection) == 'Collection.0' or get_type(thecollection) == 'Collection.1')

        # if this collection has inline items, return those

        # NOTE:  Collections are very flexible in how the represent members.  They can be inline in the collection
        # as members of the 'Items' array, or they may be href links in the links/Members array.  The could actually
        # be both.  Typically, iLO implements the inline (Items) for only when the collection is read only.  We have
        # to render it with the href links when an array contains PATCHable items because its complex to PATCH
        # inline collection members.
        # A client may wish to pass in a boolean flag favoring the href links vs. the Items in case a collection
        # contains both.

        if 'Items' in thecollection:

            # iterate items
            for item in thecollection['Items']:
                # if the item has a self uri pointer, supply that for convenience
                memberuri = None
                if 'links' in item and 'self' in item['links']:
                    memberuri = item['links']['self']['href']

                # Read up on Python generator functions to understand what this does.
                yield 200, None, item, memberuri

        # else walk the member links
        elif 'links' in thecollection and 'Member' in thecollection['links']:

            # iterate members
            for memberuri in thecollection['links']['Member']:
                # for each member return the resource indicated by the member link
                status, headers, member = rest_get(host, memberuri['href'], request_headers, iLO_loginname, iLO_password)

                # Read up on Python generator functions to understand what this does.
                yield status, headers, member, memberuri['href']

        # page forward if there are more pages in the collection
        if 'links' in thecollection and 'NextPage' in thecollection['links']:
            next_link_uri = collection_uri + '?page=' + str(thecollection['links']['NextPage']['page'])
            status, headers, thecollection = rest_get(host, next_link_uri, request_headers, iLO_loginname, iLO_password)

        # else we are finished iterating the collection
        else:
            break

def mount_virtual_media_dvd_iso(host, iLO_loginname, iLO_password, iso_url = None, boot_on_next_server_reset = None):
    # for each system in the systems collection at /rest/v1/Systems
    for status, headers, manager, memberuri in collection(host, '/rest/v1/Managers', None, iLO_loginname, iLO_password):
        # verify expected type
        # hint:  don't limit to version 0 here as we will rev to 1.0 at some point hopefully with minimal changes
        assert(get_type(manager) == 'Manager.0' or get_type(manager) == 'Manager.1')
        if 'VirtualMedia' not in manager['links']:
            print('\tVirtualMedia not available in manager links')
            continue
        # for each system in the systems collection at /rest/v1/Systems
        for status, headers, vm, memberuri in collection(host, manager['links']['VirtualMedia']['href'], None, iLO_loginname, iLO_password):
            # verify expected type
            # hint:  don't limit to version 0 here as we will rev to 1.0 at some point hopefully with minimal changes
            assert(get_type(vm) == 'VirtualMedia.0' or get_type(vm) == 'VirtualMedia.1')
            if 'DVD' in vm['MediaTypes']:
                #iso_url = 'http://blofly.usa.hp.com/mrepo/SLES-11-SP4-x86_64/iso/SLES-11-SP4-DVD-x86_64-GM-DVD1.iso'
                mount = {'Image': iso_url}
                # only add this if we are mounting and user specified something to set
                if iso_url is not None and boot_on_next_server_reset is not None:
                    mount['Oem'] = {'Hp': {'BootOnNextServerReset': True}}
                # perform the patch
                # print('PATCH ' + json.dumps(mount) + ' to ' + memberuri)
                status, headers, response = rest_patch(host, memberuri, None, mount, iLO_loginname, iLO_password)
                # print('PATCH response = ' + str(status))
                if status == 200:
                    print('Operation Successed.')
                else:
                    print(response)
                    sys.exit(1)
        break

def main():  
    module = AnsibleModule(         
        argument_spec = dict(             
            dia_ilo_inventory_name=dict(required=True, type='str'),             
            dia_ilo_ip      = dict(required=True, type='str'),             
            dia_ilo_user    = dict(required=True, type='str'),
            dia_ilo_pass    = dict(required=True, type='str'),             
            iso_url         = dict(required=True, type='str'),
            flag            = dict(required=True, type='bool'),             
            state           = dict(default='present', choices=['present', 'absent'])))  
    dia_ilo_inventory_name = module.params['dia_ilo_inventory_name']     
    dia_ilo_ip = module.params['dia_ilo_ip']     
    dia_ilo_user = module.params['dia_ilo_user']     
    dia_ilo_pass = module.params['dia_ilo_pass']
    iso_url = module.params['iso_url']
    flag = module.params['flag']
    mount_virtual_media_dvd_iso(dia_ilo_ip, dia_ilo_user, dia_ilo_pass, iso_url, flag)     
    module.exit_json(changed=True)

from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()

